// Main Plugin Thread for AI Design Co-Pilot Figma Plugin
// Handles Figma API interactions, message processing, and plugin lifecycle
// Inline Claude API helper functions to avoid module system issues
// Validate if an API key looks like a valid Claude API key
function isValidApiKeyFormat(apiKey) {
    const trimmedKey = apiKey.trim();
    return trimmedKey.length > 20 && trimmedKey.startsWith('sk-');
}
// Create a design analysis prompt for Figma components
function createDesignAnalysisPrompt(componentName, componentStructure) {
    return `
Analyze this Figma component and provide design insights:

Component Name: ${componentName}
Component Structure: ${JSON.stringify(componentStructure, null, 2)}

Please provide:
1. A brief description of the component's purpose and design
2. Suggestions for potential variants (different states, sizes, or styles)
3. Accessibility considerations
4. Best practices for using this component

Keep the response concise and actionable for a designer.
  `.trim();
}
// Send a prompt to Claude API and get a response
async function fetchClaude(prompt, apiKey) {
    // For now, return a placeholder response since we don't want to make actual API calls during development
    // This can be enabled later with real API integration
    console.log('Claude API call would be made here with prompt:', prompt.substring(0, 100) + '...');
    // Return a realistic placeholder response
    return `
This component appears to be a well-designed UI element with good structure and organization.

Suggested Variants:
• Default state with current styling
• Hover state with subtle highlight
• Disabled state with reduced opacity
• Loading state with spinner or skeleton
• Error state with warning indicators

Accessibility Considerations:
• Ensure color contrast meets WCAG AA standards
• Add proper ARIA labels and roles
• Implement keyboard navigation support
• Provide screen reader friendly descriptions

Best Practices:
• Maintain consistent spacing using design tokens
• Follow your design system's typography scale
• Test component responsiveness across screen sizes
• Consider dark mode compatibility
• Document component usage guidelines

This analysis is generated by the AI Design Co-Pilot plugin. For actual Claude AI analysis, configure your API key.
  `.trim();
}
// Plugin configuration
const PLUGIN_WINDOW_SIZE = { width: 300, height: 200 };
// In-memory storage for API key (in production, consider using clientStorage)
let storedApiKey = null;
// Plugin initialization
figma.showUI(__html__, PLUGIN_WINDOW_SIZE);
figma.ui.onmessage = handleUIMessage;
// Handle incoming messages from the UI
async function handleUIMessage(msg) {
    const { type, data } = msg;
    console.log('Received message:', type, data);
    try {
        switch (type) {
            case 'check-api-key':
                await handleCheckApiKey();
                break;
            case 'save-api-key':
                await handleSaveApiKey(data.apiKey);
                break;
            case 'analyze':
                await handleAnalyzeComponent();
                break;
            default:
                console.warn('Unknown message type:', type);
        }
    }
    catch (error) {
        console.error('Error handling message:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        sendMessageToUI('analysis-error', { error: errorMessage });
    }
}
// Check if API key is already saved
async function handleCheckApiKey() {
    try {
        // In a real implementation, you might want to use figma.clientStorage
        // to persist the API key across plugin sessions
        const hasKey = storedApiKey !== null;
        sendMessageToUI('api-key-status', { hasKey });
    }
    catch (error) {
        console.error('Error checking API key:', error);
        sendMessageToUI('api-key-status', { hasKey: false });
    }
}
// Save API key to memory
async function handleSaveApiKey(apiKey) {
    try {
        // Validate API key format
        if (!isValidApiKeyFormat(apiKey)) {
            throw new Error('Invalid API key format. Claude API keys should start with "sk-"');
        }
        // Store the API key (in production, consider using figma.clientStorage for persistence)
        storedApiKey = apiKey;
        // For production, you might want to persist the key:
        // await figma.clientStorage.setAsync('claude-api-key', apiKey);
        console.log('API key saved successfully');
        sendMessageToUI('api-key-saved', { success: true });
    }
    catch (error) {
        console.error('Error saving API key:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        sendMessageToUI('api-key-saved', { success: false, error: errorMessage });
    }
}
// Analyze the selected Figma component
async function handleAnalyzeComponent() {
    try {
        // Check if API key is available
        if (!storedApiKey) {
            throw new Error('API key not found. Please save your Claude API key first.');
        }
        // Get the current selection
        const selection = figma.currentPage.selection;
        if (selection.length === 0) {
            throw new Error('No component selected. Please select a Figma component to analyze.');
        }
        if (selection.length > 1) {
            throw new Error('Multiple components selected. Please select only one component to analyze.');
        }
        const selectedNode = selection[0];
        // Extract component information
        const componentInfo = extractComponentInfo(selectedNode);
        // Create analysis prompt
        const prompt = createDesignAnalysisPrompt(componentInfo.name, componentInfo.structure);
        // Show loading notification
        figma.notify('Analyzing component with Claude AI...', { timeout: 3000 });
        // Call Claude API (this is a placeholder - actual implementation would use the real API)
        const analysis = await fetchClaudeAnalysis(prompt, storedApiKey);
        // Display the analysis result
        figma.notify(`Analysis complete! Claude suggests: ${analysis.substring(0, 100)}...`, { timeout: 10000 });
        // Send success message to UI
        sendMessageToUI('analysis-complete', { success: true, message: 'Analysis completed successfully' });
        console.log('Full analysis:', analysis);
    }
    catch (error) {
        console.error('Error during analysis:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        figma.notify(`Analysis failed: ${errorMessage}`, { error: true });
        sendMessageToUI('analysis-error', { error: errorMessage });
    }
}
// Extract relevant information from a Figma node
function extractComponentInfo(node) {
    // Build info object step by step to avoid conditional spread operator issues
    const info = {
        name: node.name,
        type: node.type,
        id: node.id
    };
    // Add basic properties that are common to most nodes
    if (node.type !== 'SLICE') {
        info.visible = node.visible;
        info.locked = node.locked;
    }
    // Add layout properties if available
    if ('width' in node && 'height' in node) {
        info.width = node.width;
        info.height = node.height;
    }
    // Add fill information if available
    if ('fills' in node) {
        info.fills = node.fills ? node.fills.length : 0;
    }
    // Add children information if it's a container
    if ('children' in node && node.children) {
        info.childCount = node.children.length;
        info.childTypes = node.children.map(child => child.type);
    }
    // Add text content if it's a text node
    if (node.type === 'TEXT') {
        info.characters = node.characters;
        info.fontSize = node.fontSize;
        info.fontName = node.fontName;
    }
    // Add component/instance information
    if (node.type === 'COMPONENT') {
        info.description = node.description;
    }
    if (node.type === 'INSTANCE') {
        const instanceNode = node;
        info.mainComponent = instanceNode.mainComponent ? instanceNode.mainComponent.name : null;
    }
    return {
        name: node.name,
        structure: info
    };
}
// Wrapper function for Claude API call with error handling
async function fetchClaudeAnalysis(prompt, apiKey) {
    try {
        // For now, return a placeholder response
        // In the real implementation, this would call the actual Claude API
        const analysis = await fetchClaude(prompt, apiKey);
        return analysis;
    }
    catch (error) {
        // If the API call fails, provide a fallback response
        console.error('Claude API call failed:', error);
        // Return a placeholder analysis for development
        return `
Component Analysis (Placeholder):
This appears to be a ${prompt.includes('Component Name:') ? prompt.split('Component Name:')[1].split('\n')[0].trim() : 'design component'}.

Suggested Variants:
• Default state
• Hover state
• Disabled state
• Active/Selected state

Accessibility Considerations:
• Ensure proper color contrast ratios
• Add descriptive alt text for images
• Implement keyboard navigation support
• Use semantic HTML elements

Best Practices:
• Maintain consistent spacing and typography
• Follow your design system guidelines
• Test across different screen sizes
• Consider user interaction patterns

Note: This is a placeholder response. Enable Claude API for detailed AI analysis.
    `.trim();
    }
}
// Send message to UI
function sendMessageToUI(type, data) {
    figma.ui.postMessage({
        type,
        data
    });
}
// Handle plugin closure
figma.on('close', () => {
    // Clean up any resources if needed
    console.log('AI Design Co-Pilot plugin closed');
});
